{"version":3,"sources":["DiffList.js","App.js","reportWebVitals.js","index.js"],"names":["a","fetch","method","response","console","log","json","ListActions","props","useState","enabled","setEnabled","updateEnabled","getEnabled","then","data","useEffect","TopToolbar","Button","onClick","postDisable","_","catch","err","postEnable","label","DiffList","List","actions","Datagrid","TextField","source","NumberField","DateField","dataProvider","jsonServerProvider","App","Admin","Resource","name","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sXAQA,4BAAAA,EAAA,sEAC4BC,MAAM,cAAe,CACzCC,OAAQ,SAFhB,cACWC,EADX,OAIIC,QAAQC,IAAIF,GAJhB,kBAKWA,GALX,4C,kEAOA,4BAAAH,EAAA,sEAC4BC,MAAM,eAAgB,CAC1CC,OAAQ,SAFhB,cACWC,EADX,OAIIC,QAAQC,IAAIF,GAJhB,kBAKWA,GALX,4C,kEAOA,4BAAAH,EAAA,sEAC4BC,MAAM,gBADlC,cACWE,EADX,yBAEWA,EAASG,QAFpB,4C,sBAKA,IAAMC,EAAc,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBACpBC,EADoB,KACXC,EADW,KAErBC,EAAgB,Y,2CAClBC,GAAaC,MAAK,SAAAC,GACdX,QAAQC,IAAIU,GACZJ,EAAWI,EAAI,aAMvB,OAFAC,oBAAUJ,EAAe,IAElB,eAACK,EAAA,EAAD,WACH,cAACC,EAAA,EAAD,CACIC,QAAS,WACDT,E,0CAASU,GAAcN,MAAK,SAAAO,GAAC,OAAET,OAAiBU,OAAM,SAAAC,GAAMnB,QAAQC,IAAIkB,GAAKX,O,0CAC5EY,GAAaV,MAAK,SAAAO,GAAC,OAAET,OAAiBU,OAAM,SAAAC,GAAMnB,QAAQC,IAAIkB,GAAKX,QAE5Ea,MAAOf,EAAU,UAAY,WAN9B,SAUEgB,EAAW,SAAAlB,GAAK,OACzB,8BACA,cAACmB,EAAA,EAAD,2BAAUnB,GAAV,IAAiBoB,QAAS,cAAC,EAAD,IAA1B,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,YAClB,cAACC,EAAA,EAAD,CAAaD,OAAO,WACpB,cAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,gBAClB,cAACD,EAAA,EAAD,CAAWC,OAAO,kBAClB,cAACE,EAAA,EAAD,CAAWF,OAAO,wBCtDxBG,EAAeC,YAAmB,OAOzBC,EANH,kBACN,cAACC,EAAA,EAAD,CAAOH,aAAcA,EAArB,SACI,cAACI,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMd,OCIxBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2b6c5306.chunk.js","sourcesContent":["\nimport * as React from \"react\";\nimport {useEffect, useState} from \"react\"\nimport { List, Datagrid, TextField, NumberField, DateField, \n    TopToolbar,\n    Button,} from 'react-admin';\nimport IconEvent from '@material-ui/icons/Event';\n\nasync function postEnable() {\n    const  response = await fetch(\"/api/enable\", {\n        method: \"POST\",\n    })\n    console.log(response)\n    return response\n}\nasync function postDisable() {\n    const  response = await fetch(\"/api/disable\", {\n        method: \"POST\",\n    })\n    console.log(response)\n    return response\n}\nasync function getEnabled() {\n    const  response = await fetch(\"/api/enabled\")\n    return response.json()\n}\n\nconst ListActions = (props) => {\n    const [enabled, setEnabled] = useState(false)\n    const updateEnabled = ()=>{\n        getEnabled().then(data => {\n            console.log(data)\n            setEnabled(data[\"enabled\"])\n        })\n    }\n\n    useEffect(updateEnabled, [])\n\n    return <TopToolbar>\n        <Button\n            onClick={() => { \n                if (enabled) postDisable().then(_=>updateEnabled()).catch(err=>{console.log(err);updateEnabled()})\n                else postEnable().then(_=>updateEnabled()).catch(err=>{console.log(err);updateEnabled()})\n            }}\n            label={enabled ? \"disable\" : \"enable\"}\n        /> : \n    </TopToolbar>\n}\nexport const DiffList = props => (\n    <div>\n    <List {...props} actions={<ListActions/>}>\n        <Datagrid >\n            <TextField source=\"id\" />\n            <TextField source=\"path\" />\n            <TextField source=\"request\" />\n            <NumberField source=\"status\" />\n            <TextField source=\"body\" />\n            <TextField source=\"body_golden\" />\n            <TextField source=\"status_golden\" />\n            <DateField source=\"created_at\" />\n        </Datagrid>\n    </List>\n    \n    </div>\n);","\nimport * as React from \"react\";\nimport jsonServerProvider from 'ra-data-json-server';\nimport { Admin, Resource, ListGuesser } from 'react-admin';\nimport {DiffList} from \"./DiffList\"\nconst dataProvider = jsonServerProvider('api');\nconst App = () => (\n      <Admin dataProvider={dataProvider}>\n          <Resource name=\"diffs\" list={DiffList} />\n      </Admin>\n  );\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}